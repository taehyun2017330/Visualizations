{"ast":null,"code":"var _jsxFileName = \"/Users/taehyun/Downloads/2021-14284-\\u110B\\u1163\\u11BC\\u1110\\u1162\\u1112\\u1167\\u11AB 2/src/components/Mainplot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport create from 'zustand';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useStore = create(set => ({\n  selectedIndices: [],\n  setSelectedIndices: indices => set({\n    selectedIndices: indices\n  })\n}));\nconst Mainplot = props => {\n  _s();\n  const splotSvg = useRef(null);\n  const barplotSvg = useRef(null);\n  const setSelectedIndices = useStore(state => state.setSelectedIndices);\n  const svgSize = props.margin * 2 + props.size;\n  useEffect(() => {\n    const svg = d3.select(splotSvg.current);\n    const barSvg = d3.select(barplotSvg.current);\n    const axisSize = svgSize - 2 * props.margin;\n    const minX = d3.min(props.data, d => d[0]);\n    const maxX = d3.max(props.data, d => d[0]);\n    const sortedData = props.data.slice().sort((a, b) => a[1] - b[1]);\n    const minY = sortedData[0][1];\n    const maxY = sortedData[sortedData.length - 1][1];\n    const yScale = d3.scaleLinear().domain([minY, maxY]).range([props.margin + axisSize, props.margin]);\n    const xScale = d3.scaleLinear().domain([minX, maxX]).range([props.margin, props.margin + axisSize]);\n\n    // Calculate the range of values for both x and y axes\n    const xRange = maxX - minX;\n    const yRange = maxY - minY;\n\n    // Determine the number of ticks based on the range and desired tick interval\n    const xTicks = Math.ceil(xRange / 10);\n    const yTicks = Math.ceil(yRange / 10);\n\n    // Create the x and y axis generators with ticks at intervals of 10\n    const xAxis = d3.axisBottom(xScale).ticks(xTicks).tickFormat(d => d.toFixed(0));\n    const yAxis = d3.axisLeft(yScale).ticks(yTicks).tickFormat(d => d.toFixed(0));\n    const brush = d3.brush().extent([[props.margin, props.margin], [svgSize - props.margin, svgSize - props.margin]]).on(\"brush\", brushed) // Listen to brush event\n    .on(\"end\", brushEnded); // Separate end event handler\n\n    svg.append(\"g\").call(brush);\n    // Create the x and y axis generators without grid lines\n\n    // Append the x-axis to the SVG\n    // Append the x-axis to the SVG\n    svg.append(\"g\").attr(\"transform\", `translate(0, ${svgSize - props.margin})`).call(xAxis).selectAll(\"text\").attr(\"dy\", \"0.3em\");\n\n    // Append the y-axis to the SVG\n    svg.append(\"g\").attr(\"transform\", `translate(${props.margin}, 0)`).call(yAxis).selectAll(\"text\").attr(\"dx\", \"0em\");\n    svg.selectAll(\"circle\").data(props.data).enter().append(\"circle\").attr(\"class\", (d, idx) => `point-${idx}`).attr(\"cx\", d => xScale(d[0])).attr(\"cy\", d => yScale(d[1])).attr(\"r\", props.radius).attr(\"fill\", \"blue\");\n    function brushed(event) {\n      if (!event.selection) {\n        // If no selection, reset the colors of all dots and update the bar plot with the entire dataset\n        svg.selectAll(\"circle\").classed(\"highlighted\", false).classed(\"hovered\", false);\n        updateBarPlot(props.data);\n        return;\n      }\n      const selectedIndices = [];\n      const [[x0, y0], [x1, y1]] = event.selection;\n      props.data.forEach((d, idx) => {\n        const isSelected = xScale(d[0]) >= x0 && xScale(d[0]) <= x1 && yScale(d[1]) >= y0 && yScale(d[1]) <= y1;\n        if (isSelected) {\n          selectedIndices.push(idx);\n        }\n        svg.select(`.point-${idx}`).classed(\"highlighted\", isSelected).classed(\"hovered\", isSelected);\n      });\n      setSelectedIndices(selectedIndices);\n      const selectedData = props.data.filter(d => xScale(d[0]) >= x0 && xScale(d[0]) <= x1 && yScale(d[1]) >= y0 && yScale(d[1]) <= y1);\n      if (selectedData.length <= 1) {\n        updateBarPlot(props.data);\n      } else {\n        updateBarPlot(selectedData);\n      }\n    }\n    function brushEnded(event) {\n      if (!event.selection) {\n        // If no selection, reset the colors of all dots and update the bar plot with the entire dataset\n        svg.selectAll(\"circle\").classed(\"highlighted\", false).classed(\"hovered\", false);\n        updateBarPlot(props.data);\n        setSelectedIndices([]);\n      } else {\n        const selectedData = svg.selectAll(\".highlighted\").data();\n        if (selectedData.length <= 1) {\n          updateBarPlot(props.data);\n        } else {\n          updateBarPlot(selectedData);\n        }\n      }\n      svg.select(\".brush\").call(brush.move, null); // Clear the brush selection\n    }\n\n    function updateBarPlot(data) {\n      // Clear previous bars and error bars\n      barSvg.selectAll(\"*\").remove();\n      const meanX = d3.mean(data, d => d[0]);\n      const meanY = d3.mean(data, d => d[1]);\n      const stdDevX = d3.deviation(data, d => d[0]);\n      const stdDevY = d3.deviation(data, d => d[1]);\n      const maxMean = d3.max([meanX, meanY]);\n      const maxStdDev = d3.max([stdDevX, stdDevY]);\n      const barHeightScale = d3.scaleLinear().domain([0, maxMean + maxStdDev]).range([props.margin + axisSize, props.margin]);\n      const barScale = d3.scaleBand().domain(['Mean (x)', 'Stdev(y)']).range([props.margin, props.margin + axisSize]).align(0.5).padding(props.barPadding);\n\n      // Bars for mean values\n      // Bars for mean values\n      barSvg.selectAll(\"rect\").data([meanX, meanY]).enter().append(\"rect\").attr(\"x\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i])).attr(\"y\", d => barHeightScale(d)).attr(\"width\", barScale.bandwidth()).attr(\"height\", d => svgSize - props.margin - barHeightScale(d)).attr(\"fill\", (d, i) => i === 0 ? \"steelblue\" : \"orange\"); // Different colors for the bars\n\n      // Error bars for standard deviation\n      barSvg.selectAll(\"line\").data([stdDevX, stdDevY]).enter().append(\"line\").attr(\"x1\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i]) + barScale.bandwidth() / 2).attr(\"x2\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i]) + barScale.bandwidth() / 2).attr(\"y1\", (d, i) => barHeightScale([meanX, meanY][i] + d)).attr(\"y2\", (d, i) => barHeightScale([meanX, meanY][i] - d)).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2);\n\n      // Vertical axis for the bar graph\n      const barYAxis = d3.axisLeft(barHeightScale).ticks(10).tickFormat(d => d.toFixed(0));\n      barSvg.append(\"g\").attr(\"transform\", `translate(${props.margin}, 0)`).call(barYAxis).selectAll(\"text\").attr(\"dx\", \"3px\"); // Adjust this value as needed\n\n      // Horizontal axis for the bar graph\n      const barXAxis = d3.axisBottom(barScale);\n      barSvg.append(\"g\").attr(\"transform\", `translate(0, ${svgSize - props.margin})`).call(barXAxis);\n    }\n    updateBarPlot(props.data);\n  }, [props.data, props.margin, props.size, props.radius, props.barPadding]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: splotSvg,\n      width: svgSize,\n      height: svgSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: barplotSvg,\n      width: svgSize,\n      height: svgSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n};\n_s(Mainplot, \"Xo5SlfdmBEulwJBHw67VgmGJi9U=\", false, function () {\n  return [useStore];\n});\n_c = Mainplot;\nexport default Mainplot;\nvar _c;\n$RefreshReg$(_c, \"Mainplot\");","map":{"version":3,"names":["React","useRef","useEffect","d3","create","jsxDEV","_jsxDEV","useStore","set","selectedIndices","setSelectedIndices","indices","Mainplot","props","_s","splotSvg","barplotSvg","state","svgSize","margin","size","svg","select","current","barSvg","axisSize","minX","min","data","d","maxX","max","sortedData","slice","sort","a","b","minY","maxY","length","yScale","scaleLinear","domain","range","xScale","xRange","yRange","xTicks","Math","ceil","yTicks","xAxis","axisBottom","ticks","tickFormat","toFixed","yAxis","axisLeft","brush","extent","on","brushed","brushEnded","append","call","attr","selectAll","enter","idx","radius","event","selection","classed","updateBarPlot","x0","y0","x1","y1","forEach","isSelected","push","selectedData","filter","move","remove","meanX","mean","meanY","stdDevX","deviation","stdDevY","maxMean","maxStdDev","barHeightScale","barScale","scaleBand","align","padding","barPadding","i","bandwidth","barYAxis","barXAxis","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/taehyun/Downloads/2021-14284-양태현 2/src/components/Mainplot.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nimport * as d3 from \"d3\";\nimport create from 'zustand';\n\nexport const useStore = create((set) => ({\n\tselectedIndices: [],\n\tsetSelectedIndices: (indices) => set({ selectedIndices: indices })\n  }));\n\n  \n\nconst Mainplot = (props) => {\n  const splotSvg = useRef(null);\n  const barplotSvg = useRef(null);\n  const setSelectedIndices = useStore((state) => state.setSelectedIndices);\n  \n  \n\n  \n  const svgSize = props.margin * 2 + props.size;\n\n  useEffect(() => {\n\t\n    const svg = d3.select(splotSvg.current);\n    const barSvg = d3.select(barplotSvg.current);\n    const axisSize = svgSize - 2 * props.margin;\n \n    const minX = d3.min(props.data, d => d[0]);\n    const maxX = d3.max(props.data, d => d[0]);\n\tconst sortedData = props.data.slice().sort((a, b) => a[1] - b[1]);\n    const minY = sortedData[0][1];\n    const maxY = sortedData[sortedData.length - 1][1];\n\n\n\tconst yScale = d3.scaleLinear().domain([minY, maxY]).range([props.margin + axisSize, props.margin]);\n\t\n\n    const xScale = d3.scaleLinear().domain([minX, maxX]).range([props.margin, props.margin + axisSize]);\n    \n// Calculate the range of values for both x and y axes\nconst xRange = maxX - minX;\nconst yRange = maxY - minY;\n\n// Determine the number of ticks based on the range and desired tick interval\nconst xTicks = Math.ceil(xRange / 10);\nconst yTicks = Math.ceil(yRange / 10);\n\n// Create the x and y axis generators with ticks at intervals of 10\nconst xAxis = d3.axisBottom(xScale).ticks(xTicks).tickFormat(d => d.toFixed(0));\nconst yAxis = d3.axisLeft(yScale).ticks(yTicks).tickFormat(d => d.toFixed(0));\n\n\n\n\n\t\n\n    const brush = d3.brush()\n    .extent([[props.margin, props.margin], [svgSize - props.margin, svgSize - props.margin]])\n    .on(\"brush\", brushed) // Listen to brush event\n    .on(\"end\", brushEnded); // Separate end event handler\n\n\n    svg.append(\"g\").call(brush);\n\t// Create the x and y axis generators without grid lines\n\n\n    // Append the x-axis to the SVG\n   // Append the x-axis to the SVG\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${svgSize-props.margin})`)\n    .call(xAxis)\n    .selectAll(\"text\")\n    .attr(\"dy\", \"0.3em\");\n\n// Append the y-axis to the SVG\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(${props.margin}, 0)`)\n    .call(yAxis)\n    .selectAll(\"text\")\n    .attr(\"dx\", \"0em\");\n\n\n    svg.selectAll(\"circle\")\n   .data(props.data)\n   .enter()\n   .append(\"circle\")\n   .attr(\"class\", (d, idx) => `point-${idx}`)\n   .attr(\"cx\", d => xScale(d[0]))\n   .attr(\"cy\", d => yScale(d[1]))\n   .attr(\"r\", props.radius)\n   .attr(\"fill\", \"blue\");\n\n\n\t  function brushed(event) {\n\t\tif (!event.selection) {\n\t\t\t// If no selection, reset the colors of all dots and update the bar plot with the entire dataset\n\t\t\tsvg.selectAll(\"circle\")\n\t\t\t\t.classed(\"highlighted\", false)\n\t\t\t\t.classed(\"hovered\", false);\n\t\t\tupdateBarPlot(props.data);\n\t\t\treturn;\n\t\t}\n\n\t\t\n\t\tconst selectedIndices = [];\n\t\tconst [[x0, y0], [x1, y1]] = event.selection;\n\t\t\n\t\tprops.data.forEach((d, idx) => {\n\t\t\tconst isSelected = xScale(d[0]) >= x0 && xScale(d[0]) <= x1 && yScale(d[1]) >= y0 && yScale(d[1]) <= y1;\n\t\t\tif (isSelected) {\n\t\t\t\tselectedIndices.push(idx);\n\t\t\t}\n\t\t\tsvg.select(`.point-${idx}`)\n\t\t\t   .classed(\"highlighted\", isSelected)\n\t\t\t   .classed(\"hovered\", isSelected);\n\t\t\t   \n\t\t});\n\n\t\t\n\t\n\t\tsetSelectedIndices(selectedIndices);\n\n\t\n\t\tconst selectedData = props.data.filter(d => xScale(d[0]) >= x0 && xScale(d[0]) <= x1 && yScale(d[1]) >= y0 && yScale(d[1]) <= y1);\n\t\n\t\tif (selectedData.length <= 1) {\n\t\t\tupdateBarPlot(props.data);\n\t\t} else {\n\t\t\tupdateBarPlot(selectedData);\n\t\t}\n\t}\n\t\n\tfunction brushEnded(event) {\n\t\tif (!event.selection) {\n\t\t\t// If no selection, reset the colors of all dots and update the bar plot with the entire dataset\n\t\t\tsvg.selectAll(\"circle\")\n\t\t\t\t.classed(\"highlighted\", false)\n\t\t\t\t.classed(\"hovered\", false);\n\t\t\tupdateBarPlot(props.data);\n\t\t\tsetSelectedIndices([]);\n\t\t} else {\n\t\t\tconst selectedData = svg.selectAll(\".highlighted\").data();\n\t\t\tif (selectedData.length <= 1) {\n\t\t\t\tupdateBarPlot(props.data);\n\t\t\t} else {\n\t\t\t\tupdateBarPlot(selectedData);\n\t\t\t}\n\t\t}\n\t\tsvg.select(\".brush\").call(brush.move, null); // Clear the brush selection\n\t}\n\t\n\t\n\tfunction updateBarPlot(data) {\n\t\t// Clear previous bars and error bars\n\t\tbarSvg.selectAll(\"*\").remove();\n\t\n\t\tconst meanX = d3.mean(data, d => d[0]);\n\t\tconst meanY = d3.mean(data, d => d[1]);\n\t\tconst stdDevX = d3.deviation(data, d => d[0]);\n\t\tconst stdDevY = d3.deviation(data, d => d[1]);\n\t\n\t\tconst maxMean = d3.max([meanX, meanY]);\n\t\tconst maxStdDev = d3.max([stdDevX, stdDevY]);\n\t\n\t\tconst barHeightScale = d3.scaleLinear().domain([0, maxMean + maxStdDev]).range([props.margin + axisSize, props.margin]);\n\t\tconst barScale = d3.scaleBand().domain(['Mean (x)', 'Stdev(y)']).range([props.margin, props.margin + axisSize]).align(0.5).padding(props.barPadding);\n\t\n\t\t// Bars for mean values\n\t\t\t\t// Bars for mean values\n\t\tbarSvg.selectAll(\"rect\").data([meanX, meanY]).enter().append(\"rect\")\n\t\t.attr(\"x\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i]))\n\t\t.attr(\"y\", d => barHeightScale(d))\n\t\t.attr(\"width\", barScale.bandwidth())\n\t\t.attr(\"height\", d => svgSize - props.margin - barHeightScale(d))\n\t\t.attr(\"fill\", (d, i) => i === 0 ? \"steelblue\" : \"orange\"); // Different colors for the bars\n\n\t\n\t\t// Error bars for standard deviation\n\t\tbarSvg.selectAll(\"line\").data([stdDevX, stdDevY]).enter().append(\"line\")\n\t\t\t.attr(\"x1\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i]) + barScale.bandwidth() / 2)\n\t\t\t.attr(\"x2\", (d, i) => barScale(['Mean (x)', 'Stdev(y)'][i]) + barScale.bandwidth() / 2)\n\t\t\t.attr(\"y1\", (d, i) => barHeightScale([meanX, meanY][i] + d))\n\t\t\t.attr(\"y2\", (d, i) => barHeightScale([meanX, meanY][i] - d))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"stroke-width\", 2);\n\t\n\t\t// Vertical axis for the bar graph\n\t\tconst barYAxis = d3.axisLeft(barHeightScale).ticks(10).tickFormat(d => d.toFixed(0));\n\t\tbarSvg.append(\"g\")\n\t\t.attr(\"transform\", `translate(${props.margin}, 0)`)\n\t\t.call(barYAxis)\n\t\t.selectAll(\"text\")\n\t\t.attr(\"dx\", \"3px\"); // Adjust this value as needed\n\t\n    \n    // Horizontal axis for the bar graph\n    const barXAxis = d3.axisBottom(barScale);\n    barSvg.append(\"g\")\n        .attr(\"transform\", `translate(0, ${svgSize - props.margin})`)\n        .call(barXAxis);\n    }\n\n    updateBarPlot(props.data);\n\n  }, [props.data, props.margin, props.size, props.radius, props.barPadding]);\n\n  return (\n        <div>\n            <svg ref={splotSvg} width={svgSize} height={svgSize}></svg>\n            <svg ref={barplotSvg} width={svgSize} height={svgSize}></svg>\n        </div>\n);\n\n};\n\nexport default Mainplot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}