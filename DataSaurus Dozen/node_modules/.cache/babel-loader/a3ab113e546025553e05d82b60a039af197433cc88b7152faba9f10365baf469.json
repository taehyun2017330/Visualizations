{"ast":null,"code":"import { max, range, tickStep } from \"d3-array\";\nimport { slice } from \"./array.js\";\nimport { blurX, blurY } from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport contours from \"./contours.js\";\nfunction defaultX(d) {\n  return d[0];\n}\nfunction defaultY(d) {\n  return d[1];\n}\nfunction defaultWeight() {\n  return 1;\n}\nexport default function () {\n  var x = defaultX,\n    y = defaultY,\n    weight = defaultWeight,\n    dx = 960,\n    dy = 500,\n    r = 20,\n    // blur radius\n    k = 2,\n    // log2(grid cell size)\n    o = r * 3,\n    // grid offset, to pad for blur\n    n = dx + o * 2 >> k,\n    // grid width\n    m = dy + o * 2 >> k,\n    // grid height\n    threshold = constant(20);\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n      values1 = new Float32Array(n * m),\n      pow2k = Math.pow(2, -k);\n    data.forEach(function (d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n        yi = (y(d, i, data) + o) * pow2k,\n        wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n          y0 = Math.floor(yi),\n          xt = xi - x0 - 0.5,\n          yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n    return contours().thresholds(tz).size([n, m])(values0).map(transform);\n  }\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0],\n      _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n  return density;\n}","map":{"version":3,"names":["max","range","tickStep","slice","blurX","blurY","constant","contours","defaultX","d","defaultY","defaultWeight","x","y","weight","dx","dy","r","k","o","n","m","threshold","density","data","values0","Float32Array","values1","pow2k","Math","pow","forEach","i","xi","yi","wi","x0","floor","y0","xt","yt","width","height","tz","Array","isArray","stop","shift","thresholds","size","map","transform","geometry","value","coordinates","transformPolygon","transformRing","transformPoint","resize","_","arguments","length","_0","_1","Error","cellSize","log","LN2","call","bandwidth","sqrt","round"],"sources":["/Users/taehyun/Downloads/Visauslsl/DataSaurus Dozen/node_modules/d3-contour/src/density.js"],"sourcesContent":["import {max, range, tickStep} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport {blurX, blurY} from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k);\n\n    data.forEach(function(d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n"],"mappings":"AAAA,SAAQA,GAAG,EAAEC,KAAK,EAAEC,QAAQ,QAAO,UAAU;AAC7C,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,KAAK,EAAEC,KAAK,QAAO,WAAW;AACtC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;AAEpC,SAASC,QAAQA,CAACC,CAAC,EAAE;EACnB,OAAOA,CAAC,CAAC,CAAC,CAAC;AACb;AAEA,SAASC,QAAQA,CAACD,CAAC,EAAE;EACnB,OAAOA,CAAC,CAAC,CAAC,CAAC;AACb;AAEA,SAASE,aAAaA,CAAA,EAAG;EACvB,OAAO,CAAC;AACV;AAEA,eAAe,YAAW;EACxB,IAAIC,CAAC,GAAGJ,QAAQ;IACZK,CAAC,GAAGH,QAAQ;IACZI,MAAM,GAAGH,aAAa;IACtBI,EAAE,GAAG,GAAG;IACRC,EAAE,GAAG,GAAG;IACRC,CAAC,GAAG,EAAE;IAAE;IACRC,CAAC,GAAG,CAAC;IAAE;IACPC,CAAC,GAAGF,CAAC,GAAG,CAAC;IAAE;IACXG,CAAC,GAAIL,EAAE,GAAGI,CAAC,GAAG,CAAC,IAAKD,CAAC;IAAE;IACvBG,CAAC,GAAIL,EAAE,GAAGG,CAAC,GAAG,CAAC,IAAKD,CAAC;IAAE;IACvBI,SAAS,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5B,SAASiB,OAAOA,CAACC,IAAI,EAAE;IACrB,IAAIC,OAAO,GAAG,IAAIC,YAAY,CAACN,CAAC,GAAGC,CAAC,CAAC;MACjCM,OAAO,GAAG,IAAID,YAAY,CAACN,CAAC,GAAGC,CAAC,CAAC;MACjCO,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAACZ,CAAC,CAAC;IAE3BM,IAAI,CAACO,OAAO,CAAC,UAAStB,CAAC,EAAEuB,CAAC,EAAER,IAAI,EAAE;MAChC,IAAIS,EAAE,GAAG,CAACrB,CAAC,CAACH,CAAC,EAAEuB,CAAC,EAAER,IAAI,CAAC,GAAGL,CAAC,IAAIS,KAAK;QAChCM,EAAE,GAAG,CAACrB,CAAC,CAACJ,CAAC,EAAEuB,CAAC,EAAER,IAAI,CAAC,GAAGL,CAAC,IAAIS,KAAK;QAChCO,EAAE,GAAG,CAACrB,MAAM,CAACL,CAAC,EAAEuB,CAAC,EAAER,IAAI,CAAC;MAC5B,IAAIS,EAAE,IAAI,CAAC,IAAIA,EAAE,GAAGb,CAAC,IAAIc,EAAE,IAAI,CAAC,IAAIA,EAAE,GAAGb,CAAC,EAAE;QAC1C,IAAIe,EAAE,GAAGP,IAAI,CAACQ,KAAK,CAACJ,EAAE,CAAC;UACnBK,EAAE,GAAGT,IAAI,CAACQ,KAAK,CAACH,EAAE,CAAC;UACnBK,EAAE,GAAGN,EAAE,GAAGG,EAAE,GAAG,GAAG;UAClBI,EAAE,GAAGN,EAAE,GAAGI,EAAE,GAAG,GAAG;QACtBb,OAAO,CAACW,EAAE,GAAGE,EAAE,GAAGlB,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGmB,EAAE,KAAK,CAAC,GAAGC,EAAE,CAAC,GAAGL,EAAE;QAChDV,OAAO,CAACW,EAAE,GAAG,CAAC,GAAGE,EAAE,GAAGlB,CAAC,CAAC,IAAImB,EAAE,IAAI,CAAC,GAAGC,EAAE,CAAC,GAAGL,EAAE;QAC9CV,OAAO,CAACW,EAAE,GAAG,CAAC,GAAG,CAACE,EAAE,GAAG,CAAC,IAAIlB,CAAC,CAAC,IAAImB,EAAE,GAAGC,EAAE,GAAGL,EAAE;QAC9CV,OAAO,CAACW,EAAE,GAAG,CAACE,EAAE,GAAG,CAAC,IAAIlB,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGmB,EAAE,IAAIC,EAAE,GAAGL,EAAE;MAClD;IACF,CAAC,CAAC;;IAEF;IACA/B,KAAK,CAAC;MAACqC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACgB,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAACoC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACc,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IACzFd,KAAK,CAAC;MAACqC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACgB,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAACoC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACc,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IACzFd,KAAK,CAAC;MAACqC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACgB,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAACoC,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACc,KAAK,EAAErB,CAAC;MAAEsB,MAAM,EAAErB,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IAEzF,IAAIyB,EAAE,GAAGrB,SAAS,CAACG,OAAO,CAAC;;IAE3B;IACA,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACF,EAAE,CAAC,EAAE;MACtB,IAAIG,IAAI,GAAG9C,GAAG,CAACyB,OAAO,CAAC;MACvBkB,EAAE,GAAGzC,QAAQ,CAAC,CAAC,EAAE4C,IAAI,EAAEH,EAAE,CAAC;MAC1BA,EAAE,GAAG1C,KAAK,CAAC,CAAC,EAAE4B,IAAI,CAACQ,KAAK,CAACS,IAAI,GAAGH,EAAE,CAAC,GAAGA,EAAE,EAAEA,EAAE,CAAC;MAC7CA,EAAE,CAACI,KAAK,CAAC,CAAC;IACZ;IAEA,OAAOxC,QAAQ,CAAC,CAAC,CACZyC,UAAU,CAACL,EAAE,CAAC,CACdM,IAAI,CAAC,CAAC7B,CAAC,EAAEC,CAAC,CAAC,CAAC,CACdI,OAAO,CAAC,CACNyB,GAAG,CAACC,SAAS,CAAC;EACrB;EAEA,SAASA,SAASA,CAACC,QAAQ,EAAE;IAC3BA,QAAQ,CAACC,KAAK,IAAIxB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACvCkC,QAAQ,CAACE,WAAW,CAACvB,OAAO,CAACwB,gBAAgB,CAAC;IAC9C,OAAOH,QAAQ;EACjB;EAEA,SAASG,gBAAgBA,CAACD,WAAW,EAAE;IACrCA,WAAW,CAACvB,OAAO,CAACyB,aAAa,CAAC;EACpC;EAEA,SAASA,aAAaA,CAACF,WAAW,EAAE;IAClCA,WAAW,CAACvB,OAAO,CAAC0B,cAAc,CAAC;EACrC;;EAEA;EACA,SAASA,cAAcA,CAACH,WAAW,EAAE;IACnCA,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGzB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEZ,CAAC,CAAC,GAAGC,CAAC;IACpDmC,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGzB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEZ,CAAC,CAAC,GAAGC,CAAC;EACtD;EAEA,SAASuC,MAAMA,CAAA,EAAG;IAChBvC,CAAC,GAAGF,CAAC,GAAG,CAAC;IACTG,CAAC,GAAIL,EAAE,GAAGI,CAAC,GAAG,CAAC,IAAKD,CAAC;IACrBG,CAAC,GAAIL,EAAE,GAAGG,CAAC,GAAG,CAAC,IAAKD,CAAC;IACrB,OAAOK,OAAO;EAChB;EAEAA,OAAO,CAACX,CAAC,GAAG,UAAS+C,CAAC,EAAE;IACtB,OAAOC,SAAS,CAACC,MAAM,IAAIjD,CAAC,GAAG,OAAO+C,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGrD,QAAQ,CAAC,CAACqD,CAAC,CAAC,EAAEpC,OAAO,IAAIX,CAAC;EACzF,CAAC;EAEDW,OAAO,CAACV,CAAC,GAAG,UAAS8C,CAAC,EAAE;IACtB,OAAOC,SAAS,CAACC,MAAM,IAAIhD,CAAC,GAAG,OAAO8C,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGrD,QAAQ,CAAC,CAACqD,CAAC,CAAC,EAAEpC,OAAO,IAAIV,CAAC;EACzF,CAAC;EAEDU,OAAO,CAACT,MAAM,GAAG,UAAS6C,CAAC,EAAE;IAC3B,OAAOC,SAAS,CAACC,MAAM,IAAI/C,MAAM,GAAG,OAAO6C,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGrD,QAAQ,CAAC,CAACqD,CAAC,CAAC,EAAEpC,OAAO,IAAIT,MAAM;EACnG,CAAC;EAEDS,OAAO,CAAC0B,IAAI,GAAG,UAASU,CAAC,EAAE;IACzB,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAO,CAAC9C,EAAE,EAAEC,EAAE,CAAC;IACtC,IAAI8C,EAAE,GAAG,CAACH,CAAC,CAAC,CAAC,CAAC;MAAEI,EAAE,GAAG,CAACJ,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,EAAEG,EAAE,IAAI,CAAC,IAAIC,EAAE,IAAI,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IAC1D,OAAOjD,EAAE,GAAG+C,EAAE,EAAE9C,EAAE,GAAG+C,EAAE,EAAEL,MAAM,CAAC,CAAC;EACnC,CAAC;EAEDnC,OAAO,CAAC0C,QAAQ,GAAG,UAASN,CAAC,EAAE;IAC7B,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAO,CAAC,IAAI3C,CAAC;IACpC,IAAI,EAAE,CAACyC,CAAC,GAAG,CAACA,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,IAAIK,KAAK,CAAC,mBAAmB,CAAC;IAC1D,OAAO9C,CAAC,GAAGW,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACqC,GAAG,CAACP,CAAC,CAAC,GAAG9B,IAAI,CAACsC,GAAG,CAAC,EAAET,MAAM,CAAC,CAAC;EACzD,CAAC;EAEDnC,OAAO,CAACyB,UAAU,GAAG,UAASW,CAAC,EAAE;IAC/B,OAAOC,SAAS,CAACC,MAAM,IAAIvC,SAAS,GAAG,OAAOqC,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGf,KAAK,CAACC,OAAO,CAACc,CAAC,CAAC,GAAGrD,QAAQ,CAACH,KAAK,CAACiE,IAAI,CAACT,CAAC,CAAC,CAAC,GAAGrD,QAAQ,CAACqD,CAAC,CAAC,EAAEpC,OAAO,IAAID,SAAS;EACrJ,CAAC;EAEDC,OAAO,CAAC8C,SAAS,GAAG,UAASV,CAAC,EAAE;IAC9B,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAOhC,IAAI,CAACyC,IAAI,CAACrD,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,IAAI,EAAE,CAAC0C,CAAC,GAAG,CAACA,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,IAAIK,KAAK,CAAC,mBAAmB,CAAC;IAC1D,OAAO/C,CAAC,GAAGY,IAAI,CAAC0C,KAAK,CAAC,CAAC1C,IAAI,CAACyC,IAAI,CAAC,CAAC,GAAGX,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAED,MAAM,CAAC,CAAC;EACrE,CAAC;EAED,OAAOnC,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}