{"ast":null,"code":"import ascending from \"./ascending.js\";\nexport default function bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n  }\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n  return {\n    left,\n    center,\n    right\n  };\n}","map":{"version":3,"names":["ascending","bisector","f","delta","compare1","compare2","length","d","x","left","a","lo","hi","mid","right","center","i"],"sources":["/Users/taehyun/Downloads/2021-14284-양태현 2/node_modules/d3-array/src/bisector.js"],"sourcesContent":["import ascending from \"./ascending.js\";\n\nexport default function bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AAEtC,eAAe,SAASC,QAAQA,CAACC,CAAC,EAAE;EAClC,IAAIC,KAAK,GAAGD,CAAC;EACb,IAAIE,QAAQ,GAAGF,CAAC;EAChB,IAAIG,QAAQ,GAAGH,CAAC;EAEhB,IAAIA,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IAClBH,KAAK,GAAGA,CAACI,CAAC,EAAEC,CAAC,KAAKN,CAAC,CAACK,CAAC,CAAC,GAAGC,CAAC;IAC1BJ,QAAQ,GAAGJ,SAAS;IACpBK,QAAQ,GAAGA,CAACE,CAAC,EAAEC,CAAC,KAAKR,SAAS,CAACE,CAAC,CAACK,CAAC,CAAC,EAAEC,CAAC,CAAC;EACzC;EAEA,SAASC,IAAIA,CAACC,CAAC,EAAEF,CAAC,EAAEG,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGF,CAAC,CAACJ,MAAM,EAAE;IACzC,IAAIK,EAAE,GAAGC,EAAE,EAAE;MACX,IAAIR,QAAQ,CAACI,CAAC,EAAEA,CAAC,CAAC,KAAK,CAAC,EAAE,OAAOI,EAAE;MACnC,GAAG;QACD,MAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;QAC3B,IAAIP,QAAQ,CAACK,CAAC,CAACG,GAAG,CAAC,EAAEL,CAAC,CAAC,GAAG,CAAC,EAAEG,EAAE,GAAGE,GAAG,GAAG,CAAC,CAAC,KACrCD,EAAE,GAAGC,GAAG;MACf,CAAC,QAAQF,EAAE,GAAGC,EAAE;IAClB;IACA,OAAOD,EAAE;EACX;EAEA,SAASG,KAAKA,CAACJ,CAAC,EAAEF,CAAC,EAAEG,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGF,CAAC,CAACJ,MAAM,EAAE;IAC1C,IAAIK,EAAE,GAAGC,EAAE,EAAE;MACX,IAAIR,QAAQ,CAACI,CAAC,EAAEA,CAAC,CAAC,KAAK,CAAC,EAAE,OAAOI,EAAE;MACnC,GAAG;QACD,MAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;QAC3B,IAAIP,QAAQ,CAACK,CAAC,CAACG,GAAG,CAAC,EAAEL,CAAC,CAAC,IAAI,CAAC,EAAEG,EAAE,GAAGE,GAAG,GAAG,CAAC,CAAC,KACtCD,EAAE,GAAGC,GAAG;MACf,CAAC,QAAQF,EAAE,GAAGC,EAAE;IAClB;IACA,OAAOD,EAAE;EACX;EAEA,SAASI,MAAMA,CAACL,CAAC,EAAEF,CAAC,EAAEG,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGF,CAAC,CAACJ,MAAM,EAAE;IAC3C,MAAMU,CAAC,GAAGP,IAAI,CAACC,CAAC,EAAEF,CAAC,EAAEG,EAAE,EAAEC,EAAE,GAAG,CAAC,CAAC;IAChC,OAAOI,CAAC,GAAGL,EAAE,IAAIR,KAAK,CAACO,CAAC,CAACM,CAAC,GAAG,CAAC,CAAC,EAAER,CAAC,CAAC,GAAG,CAACL,KAAK,CAACO,CAAC,CAACM,CAAC,CAAC,EAAER,CAAC,CAAC,GAAGQ,CAAC,GAAG,CAAC,GAAGA,CAAC;EACnE;EAEA,OAAO;IAACP,IAAI;IAAEM,MAAM;IAAED;EAAK,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}